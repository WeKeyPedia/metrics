// Generated by CoffeeScript 1.7.1
(function() {
  var MetricClickstream, MetricDefault, MetricPageviews, MetricRevisions, Page, PageViewSummary,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  $(document).ready(function() {
    var default_page, page;
    default_page = "Pi/in-geometry";
    return page = new Page({
      title: "Pi",
      domain: "geometry"
    });
  });

  "use strict";

  Page = (function(_super) {
    __extends(Page, _super);

    function Page() {
      return Page.__super__.constructor.apply(this, arguments);
    }

    Page.prototype.initialize = function() {
      console.log("model:", this);
      this.available_views = {
        pageviews: MetricPageviews,
        clickstream: MetricClickstream,
        revisions: MetricRevisions
      };
      this.views = {
        "summary": new PageViewSummary({
          model: this,
          el: "#summary"
        }).render()
      };
      this.get_available_metrics();
      return this;
    };

    Page.prototype.get_available_metrics = function() {
      $.get("/" + (this.get('title')) + "/in-" + (this.get('domain')), (function(_this) {
        return function(data) {
          var $el, div, metric, metrics, v, _i, _len, _results;
          metrics = data["metrics"];
          $el = $("#visualizations");
          _results = [];
          for (_i = 0, _len = metrics.length; _i < _len; _i++) {
            metric = metrics[_i];
            _this.set("url:" + metric, "/" + (_this.get('title')) + "/in-" + (_this.get('domain')) + "/" + metric);
            div = $("<div/>").attr("id", "metric-" + metric).addClass("metric");
            div.appendTo($("#visualizations"));
            if (__indexOf.call(_(_this.available_views).keys(), metric) < 0) {
              v = MetricDefault;
            } else {
              v = _this.available_views[metric];
            }
            _this.views["metric-" + metric] = new v({
              model: _this,
              el: "#metric-" + metric,
              attributes: {
                metric: metric
              }
            });
            _this.views["metric-" + metric].render();
            _results.push(_this.fetch_metric(metric));
          }
          return _results;
        };
      })(this));
      return this;
    };

    Page.prototype.fetch_metric = function(metric) {
      $.get(this.get("url:" + metric), (function(_this) {
        return function(res) {
          return _this.set(metric, res["data"]);
        };
      })(this));
      return this;
    };

    return Page;

  })(Backbone.Model);

  PageViewSummary = (function(_super) {
    __extends(PageViewSummary, _super);

    function PageViewSummary() {
      return PageViewSummary.__super__.constructor.apply(this, arguments);
    }

    PageViewSummary.prototype.initialize = function() {
      console.log("view:", this);
      this.listenTo(this.model, "change:info", this.update);
      return this;
    };

    PageViewSummary.prototype.render = function() {
      this.$el.empty();
      this.$el.append("<h1>" + (this.model.get('title')) + "</h1>");
      this.$el.append("<div id='info' />");
      this.renderInfo();
      return this;
    };

    PageViewSummary.prototype.renderInfo = function() {
      var html, info, t;
      info = {
        revisions: 0,
        editors: 0
      };
      html = "<div>revisions: {{revisions}}</div>\n<div>editors: {{editors}}</div>";
      t = Handlebars.compile(html);
      return this;
    };

    return PageViewSummary;

  })(Backbone.View);

  "use strict";

  MetricPageviews = (function(_super) {
    __extends(MetricPageviews, _super);

    function MetricPageviews() {
      return MetricPageviews.__super__.constructor.apply(this, arguments);
    }

    MetricPageviews.prototype.initialize = function() {
      this.listenTo(this.model, "change:pageviews", this.update);
      return this;
    };

    MetricPageviews.prototype.template = " <h2>Pageviews</h2>\n\n <div class=\"info\">\n   <span class=\"data btn btn-default btn-xs\"><i class=\"fa fa-eye\"></i> <span class=\"number\" /> views</span>\n   from <span class=\"data btn btn-default btn-xs\"><i class=\"fa fa-calendar-o\"></i> <span class=\"from\" /></span>\n   to <span class=\"data btn btn-default btn-xs\"><i class=\"fa fa-calendar-o\"></i> <span class=\"to\" /></span>\n </div>\n\n <div class=\"action pull-right\">\n   <a class=\"json btn btn-default\" role=\"button\"><i class=\"fa fa-table\"></i> \njson</a>\n </div>\n\n <div class='preview'/>";

    MetricPageviews.prototype.render = function() {
      this.$el.empty();
      this.$el.append(this.template);
      console.log(this.model.get("url:" + this.attributes['metric']));
      this.$(".json").attr("href", this.model.get("url:" + this.attributes['metric']));
      return this;
    };

    MetricPageviews.prototype.update = function() {
      var $el, day, days, end, f, h, max_month, month, month_scale, month_width, months, start, svg, weeks, _i, _len;
      $el = this.$el.find(".preview");
      h = 300;
      month_width = 15;
      svg = d3.select("#metric-pageviews .preview").append("svg").style("width", "100%").attr("height", h);
      months = this.model.get("pageviews");
      f = d3.time.format("%Y-%m-%d");
      days = {};
      for (_i = 0, _len = months.length; _i < _len; _i++) {
        month = months[_i];
        _(month).each(function(value, day) {
          return days[day] = value;
        });
      }
      this.$(".info .from").html(_(days).keys()[0]);
      this.$(".info .to").html(_(days).keys()[_(days).size() - 1]);
      this.$(".info .number").html(d3.sum(_(days).values()));
      weeks = _(days).groupBy(function(v, k) {
        return d3.time.format("%Y-%U")(f.parse(k));
      });
      console.log(weeks);
      start = 0;
      end = 0;
      max_month = d3.max(_(months).map(function(month) {
        return d3.sum(_(month).values());
      }));
      month_scale = d3.scale.linear().domain([0, max_month]).range([0, h]);
      month = svg.append("g").selectAll(".month").data(months).enter().append("g").attr("class", "month").attr("transform", function(d, i) {
        return "translate(" + (i * (month_width + 1)) + ",0)";
      });
      month.append("rect").attr("y", function(d) {
        return h - month_scale(d3.sum(_(d).values()));
      }).attr("height", function(d) {
        return month_scale(d3.sum(_(d).values()));
      }).attr("width", month_width).style("fill", "black");
      return day = svg.append("g").selectAll(".day").data(days).enter().append("g").attr("class", "day");
    };

    return MetricPageviews;

  })(Backbone.View);

  "use strict";

  MetricClickstream = (function(_super) {
    __extends(MetricClickstream, _super);

    function MetricClickstream() {
      return MetricClickstream.__super__.constructor.apply(this, arguments);
    }

    MetricClickstream.prototype.initialize = function() {
      this.listenTo(this.model, "change:" + this.attributes['metric'], this.update);
      return this;
    };

    MetricClickstream.prototype.template = " <h2>Clickstream</h2>\n\n <div class=\"info\">\n   <span class=\"data btn btn-default btn-xs\"><i class=\"fa fa-circle-thin\"></i><i class=\"fa fa-long-arrow-right\" style=\"margin-left:-8px;\"></i>\n   <span class=\"clickstream-in\" /> inbound links</span>\n   for <span class=\"data btn btn-default btn-xs\"><i class=\"fa fa-eye\"></i> <span class=\"clickstream-in-views\" /> views</span>\n\n   <span class=\"data btn btn-default btn-xs\"><i class=\"fa fa-circle-thin\"></i><i class=\"fa fa-long-arrow-left\" style=\"margin-left:-8px;\"></i>\n   <span class=\"clickstream-out\" /> outbound links</span>\n   for <span class=\"data btn btn-default btn-xs\"><i class=\"fa fa-eye\"></i> <span class=\"clickstream-out-views\" /> views</span>\n </div>\n\n <div class=\"action pull-right\">\n   <a class=\"json btn btn-default\" role=\"button\"><i class=\"fa fa-table\"></i>\njson</a>\n </div>\n\n <div class='preview'/>";

    MetricClickstream.prototype.render = function() {
      this.$el.empty();
      this.$el.append(this.template);
      this.$(".json").attr("href", this.model.get("url:" + this.attributes['metric']));
      this.$(".preview").append('<div id="sankey" />');
      return this;
    };

    MetricClickstream.prototype.update = function() {
      var center, color, data, dragmove, h, link, links, links_in, links_out, node, nodes, path, sankey, svg, w;
      data = this.model.get(this.attributes['metric']);
      this.$(".clickstream-in").html(_(data["in"]).size());
      this.$(".clickstream-out").html(_(data["out"]).size());
      this.$(".clickstream-in-views").html(d3.sum(_(data["in"]).values()));
      this.$(".clickstream-out-views").html(d3.sum(_(data["out"]).values()));
      center = this.model.get("title");
      links_in = _.chain(data["in"]).pairs().map(function(l) {
        return {
          source: "s:" + l[0],
          target: "o:" + center,
          value: parseInt(l[1])
        };
      }).filter(function(l) {
        return l["source"].indexOf("other-") === -1;
      }).sortBy(function(l) {
        return -l["value"];
      }).first(10).value();
      links_out = _.chain(data["out"]).pairs().map(function(l) {
        return {
          target: "t:" + l[0],
          source: "o:" + center,
          value: parseInt(l[1])
        };
      }).filter(function(l) {
        return l["target"].indexOf("other-") === -1;
      }).sortBy(function(l) {
        return -l["value"];
      }).first(10).value();
      links = _.chain(links_in).union(links_out).value();
      console.log(links);
      nodes = _.chain(links).map(function(l) {
        return [l["target"], l["source"]];
      }).flatten().uniq().map(function(n) {
        return {
          name: n
        };
      }).value();
      links = _(links).map(function(l) {
        var link;
        return link = {
          source: _(nodes).findIndex(function(n) {
            return n["name"] === l["source"];
          }),
          target: _(nodes).findIndex(function(n) {
            return n["name"] === l["target"];
          }),
          value: l["value"]
        };
      });
      console.log(nodes);
      h = 300;
      color = d3.scale.category20();
      d3.select("#sankey").selectAll("*").remove();
      svg = d3.select("#sankey").append("svg").style("width", "100%").attr("height", h);
      w = svg.node().getBoundingClientRect().width;
      sankey = d3.sankey().nodeWidth(15).nodePadding(10).size([w, h]);
      path = sankey.link();
      sankey.nodes(nodes).links(links).layout(32);
      node = svg.append("g").selectAll(".node").data(nodes).enter().append("g").attr("class", "node").attr("transform", function(d) {
        return "translate(" + d.x + "," + d.y + ")";
      }).call(d3.behavior.drag().origin(function(d) {
        return d;
      }).on("dragstart", function() {
        return this.parentNode.appendChild(this);
      }).on("drag", dragmove));
      node.append("rect").attr("height", function(d) {
        return d.dy;
      }).attr("width", sankey.nodeWidth()).style("fill", function(d) {
        return d.color = color(d.name.split(":", 2)[1]);
      }).style("stroke", function(d) {
        return d3.rgb(d.color).darker(2);
      }).append("title").text(function(d) {
        return d.name;
      });
      node.append("text").attr("x", -6).attr("y", function(d) {
        return d.dy / 2;
      }).attr("dy", ".35em").attr("text-anchor", "end").attr("transform", null).text(function(d) {
        return d.name.split(":", 2)[1];
      }).filter(function(d) {
        return d.x < w / 2;
      }).attr("x", 6 + sankey.nodeWidth()).attr("text-anchor", "start");
      link = svg.append("g").selectAll(".link").data(links).enter().append("path").attr("class", "link").attr("d", path).style("stroke-width", function(d) {
        return Math.max(1, d.dy);
      }).sort(function(a, b) {
        return b.dy - a.dy;
      });
      return dragmove = function(d) {
        d3.select(this).attr("transform", "translate(" + d.x + "," + (d.y = Math.max(0, Math.min(h - d.dy, d3.event.y))) + ")");
        sankey.relayout();
        return link.attr("d", path);
      };
    };

    return MetricClickstream;

  })(Backbone.View);

  "use strict";

  MetricRevisions = (function(_super) {
    __extends(MetricRevisions, _super);

    function MetricRevisions() {
      return MetricRevisions.__super__.constructor.apply(this, arguments);
    }

    MetricRevisions.prototype.initialize = function() {
      this.listenTo(this.model, "change:" + this.attributes['metric'], this.update);
      return this;
    };

    MetricRevisions.prototype.template = " <h2>Revisions</h2>\n\n <div class=\"info\">\n   <span class=\"data btn btn-default btn-xs\">\n     <i class=\"fa fa-pencil\"></i> <span class=\"revisions\" /> revisions\n   </span>\n\n   <span class=\"data btn btn-default btn-xs\">\n     <i class=\"fa fa-user\"></i> <span class=\"editors\" /> editors\n   </span>\n\n   <span class=\"data btn btn-default btn-xs\">\n     <i class=\"fa fa-user-secret\"></i> <span class=\"ip\" /> anonymous editors\n   </span>\n\n   <span class=\"data btn btn-default btn-xs\">\n     <i class=\"fa fa-cogs\"></i> <span class=\"bots\" /> bots\n   </span>\n </div>\n\n <div class=\"action pull-right\">\n   <a class=\"json btn btn-default\" role=\"button\"><i class=\"fa fa-table\"></i>\njson</a>\n </div>\n\n <div class='preview'/>";

    MetricRevisions.prototype.render = function() {
      this.$el.empty();
      this.$el.append(this.template);
      this.$(".json").attr("href", this.model.get("url:" + this.attributes['metric']));
      this.$(".preview").append('<div id="sankey" />');
      return this;
    };

    MetricRevisions.prototype.update = function() {
      var data, registered_users, users;
      data = this.model.get(this.attributes['metric']);
      users = _.chain(data).pluck("user").uniq().value();
      registered_users = _.chain(data).filter(function(r) {
        return r.hasOwnProperty("userid") & r["userid"] !== 0;
      }).pluck("user").uniq().value();
      this.$(".info .revisions").html(_(data).size());
      this.$(".info .editors").html(_(users).size());
      this.$(".info .ip").html(_(users).size() - _(registered_users).size());
      return this.$(".info .bots").html(_.chain(users).filter(function(u) {
        return u.toLowerCase().indexOf("bot") !== -1;
      }).size().value());
    };

    return MetricRevisions;

  })(Backbone.View);

  "use strict";

  MetricDefault = (function(_super) {
    __extends(MetricDefault, _super);

    function MetricDefault() {
      return MetricDefault.__super__.constructor.apply(this, arguments);
    }

    MetricDefault.prototype.initialize = function() {
      this.listenTo(this.model, "change:" + this.attributes['metric'], this.update);
      return this;
    };

    MetricDefault.prototype.template = "<h2></h2>\n\n<div class=\"action pull-right\">\n  <a class=\"json btn btn-default\"><i class=\"fa fa-table\"></i>\njson</a>\n</div>\n\n<div class='preview'/>";

    MetricDefault.prototype.render = function() {
      var dataset_url;
      this.$el.empty();
      this.$el.append(this.template);
      this.$("h2").html(this.attributes["metric"]);
      dataset_url = this.model.get("url:" + this.attributes['metric']);
      this.$(".json").attr("href", dataset_url);
      return this;
    };

    MetricDefault.prototype.update = function() {
      var dataset_url;
      dataset_url = this.model.get("url:" + this.attributes['metric']);
      return this;
    };

    return MetricDefault;

  })(Backbone.View);

}).call(this);
